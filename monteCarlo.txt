adj_close_df = pd.DataFrame()

for ticker in tickers:
    mc_data = yf.download(ticker, start=str(start_date), end=str(end_date))
    adj_close_df[ticker] = mc_data['Adj Close']
    
adj_close_df.sample(10)


# Calculating LOG CHNG
log_returns = np.log(adj_close_df/adj_close_df.shift(1))
log_returns = log_returns.dropna()


def expected_return(weights, log_returns):
    return np.sum(log_returns.mean()*weights)

def standard_deviation(weights, cov_matrix):
    variance = weights.T @ cov_matrix @ weights
    return np.sqrt(variance)


cov_matrix = log_returns.cov()
cov_matrix

portfolio_value = 1000000
weights = np.array([1/len(tickers)]*len(tickers))
portfilio_expected_return = expected_return(weights, log_returns)
portfolio_std_dev = standard_deviation(weights, cov_matrix)


def random_z_score():
    return np.random.normal(0,1)

days = 20
def scenario_gain_loss(portfolio_value, portfolio_std_dev, z_score, days):
    return portfolio_value * portfilio_expected_return * days + portfolio_value * portfolio_std_dev * z_score * np.sqrt(days)


simulations = 10000
scenarioReturn = []
for i in range(simulations):
    z_score = random_z_score()
    scenarioReturn.append(scenario_gain_loss(portfolio_value, portfolio_std_dev, z_score, days))


confidence_interval = 0.99
VaR = -np.percentile(scenarioReturn, 100*(1 - confidence_interval))


plt.hist(scenarioReturn, bins=50, density=True)
plt.xlabel("Scenario Gain/Loss (â‚¹)")
plt.ylabel("Frequency")
plt.title(f'Distribution of Portfolio Gain/Loss Over {days} Days')
plt.axvline(-VaR, color='r', linestyle='dashed', linewidth=2, label=f'VaR at {confidence_interval:.0%}, confidence interval')
plt.legend()
plt.show()

















